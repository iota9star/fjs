// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/js.dart';
import 'api/value.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class LibFjs extends BaseEntrypoint<LibFjsApi, LibFjsApiImpl, LibFjsWire> {
  @internal
  static final instance = LibFjs._();

  LibFjs._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    LibFjsApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required LibFjsApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<LibFjsApiImpl, LibFjsWire> get apiImplConstructor =>
      LibFjsApiImpl.new;

  @override
  WireConstructor<LibFjsWire> get wireConstructor =>
      LibFjsWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.8.0';

  @override
  int get rustContentHash => 190784209;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'fjs',
    ioDirectory: 'libfjs/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class LibFjsApi extends BaseApi {
  Future<JsEvalResult> crateApiJsJsAsyncContextEval(
      {required JsAsyncContext that, required String code});

  Future<JsEvalResult> crateApiJsJsAsyncContextEvalFile(
      {required JsAsyncContext that, required String path});

  Future<JsEvalResult> crateApiJsJsAsyncContextEvalFileWithOptions(
      {required JsAsyncContext that,
      required String path,
      required JsEvalOptions options});

  Future<JsEvalResult> crateApiJsJsAsyncContextEvalFunction(
      {required JsAsyncContext that,
      required String module,
      required String method,
      List<JsValue>? params});

  Future<JsEvalResult> crateApiJsJsAsyncContextEvalWithOptions(
      {required JsAsyncContext that,
      required String code,
      required JsEvalOptions options});

  Future<JsAsyncContext> crateApiJsJsAsyncContextFrom(
      {required JsAsyncRuntime rt});

  Future<bool> crateApiJsJsAsyncRuntimeExecutePendingJob(
      {required JsAsyncRuntime that});

  Future<void> crateApiJsJsAsyncRuntimeIdle({required JsAsyncRuntime that});

  Future<bool> crateApiJsJsAsyncRuntimeIsJobPending(
      {required JsAsyncRuntime that});

  Future<MemoryUsage> crateApiJsJsAsyncRuntimeMemoryUsage(
      {required JsAsyncRuntime that});

  JsAsyncRuntime crateApiJsJsAsyncRuntimeNew();

  Future<void> crateApiJsJsAsyncRuntimeRunGc({required JsAsyncRuntime that});

  Future<void> crateApiJsJsAsyncRuntimeSetGcThreshold(
      {required JsAsyncRuntime that, required BigInt threshold});

  Future<void> crateApiJsJsAsyncRuntimeSetInfo(
      {required JsAsyncRuntime that, required String info});

  Future<void> crateApiJsJsAsyncRuntimeSetMaxStackSize(
      {required JsAsyncRuntime that, required BigInt limit});

  Future<void> crateApiJsJsAsyncRuntimeSetMemoryLimit(
      {required JsAsyncRuntime that, required BigInt limit});

  Future<void> crateApiJsJsAsyncRuntimeSetModules(
      {required JsAsyncRuntime that, required List<JsModule> modules});

  JsEvalResult crateApiJsJsContextEval(
      {required JsContext that, required String code});

  JsEvalResult crateApiJsJsContextEvalFile(
      {required JsContext that, required String path});

  JsEvalResult crateApiJsJsContextEvalFileWithOptions(
      {required JsContext that,
      required String path,
      required JsEvalOptions options});

  JsEvalResult crateApiJsJsContextEvalWithOptions(
      {required JsContext that,
      required String code,
      required JsEvalOptions options});

  JsContext crateApiJsJsContextNew({required JsRuntime rt});

  bool crateApiJsJsRuntimeExecutePendingJob({required JsRuntime that});

  bool crateApiJsJsRuntimeIsJobPending({required JsRuntime that});

  MemoryUsage crateApiJsJsRuntimeMemoryUsage({required JsRuntime that});

  JsRuntime crateApiJsJsRuntimeNew();

  void crateApiJsJsRuntimeRunGc({required JsRuntime that});

  void crateApiJsJsRuntimeSetDumpFlags(
      {required JsRuntime that, required BigInt flags});

  void crateApiJsJsRuntimeSetGcThreshold(
      {required JsRuntime that, required BigInt threshold});

  void crateApiJsJsRuntimeSetInfo(
      {required JsRuntime that, required String info});

  void crateApiJsJsRuntimeSetMaxStackSize(
      {required JsRuntime that, required BigInt limit});

  void crateApiJsJsRuntimeSetMemoryLimit(
      {required JsRuntime that, required BigInt limit});

  Future<void> crateApiJsJsRuntimeSetModules(
      {required JsRuntime that, required List<JsModule> modules});

  Future<void> crateApiInitApp();

  JsEvalOptions crateApiJsJsEvalOptionsNew();

  JsModule crateApiJsJsModuleFromCode(
      {required String module, required String code});

  JsModule crateApiJsJsModuleFromPath(
      {required String module, required String path});

  JsModule crateApiJsJsModuleNew(
      {required String module, String? code, String? path});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JsAsyncContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JsAsyncContext;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_JsAsyncContextPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JsAsyncRuntime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JsAsyncRuntime;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_JsAsyncRuntimePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JsContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JsContext;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_JsContextPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JsRuntime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JsRuntime;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_JsRuntimePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MemoryUsage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MemoryUsage;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MemoryUsagePtr;
}

class LibFjsApiImpl extends LibFjsApiImplPlatform implements LibFjsApi {
  LibFjsApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<JsEvalResult> crateApiJsJsAsyncContextEval(
      {required JsAsyncContext that, required String code}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
            that, serializer);
        sse_encode_String(code, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsAsyncContextEvalConstMeta,
      argValues: [that, code],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncContextEvalConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncContext_eval",
        argNames: ["that", "code"],
      );

  @override
  Future<JsEvalResult> crateApiJsJsAsyncContextEvalFile(
      {required JsAsyncContext that, required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
            that, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsAsyncContextEvalFileConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncContextEvalFileConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncContext_eval_file",
        argNames: ["that", "path"],
      );

  @override
  Future<JsEvalResult> crateApiJsJsAsyncContextEvalFileWithOptions(
      {required JsAsyncContext that,
      required String path,
      required JsEvalOptions options}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
            that, serializer);
        sse_encode_String(path, serializer);
        sse_encode_box_autoadd_js_eval_options(options, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsAsyncContextEvalFileWithOptionsConstMeta,
      argValues: [that, path, options],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncContextEvalFileWithOptionsConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncContext_eval_file_with_options",
        argNames: ["that", "path", "options"],
      );

  @override
  Future<JsEvalResult> crateApiJsJsAsyncContextEvalFunction(
      {required JsAsyncContext that,
      required String module,
      required String method,
      List<JsValue>? params}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
            that, serializer);
        sse_encode_String(module, serializer);
        sse_encode_String(method, serializer);
        sse_encode_opt_list_js_value(params, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsAsyncContextEvalFunctionConstMeta,
      argValues: [that, module, method, params],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncContextEvalFunctionConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncContext_eval_function",
        argNames: ["that", "module", "method", "params"],
      );

  @override
  Future<JsEvalResult> crateApiJsJsAsyncContextEvalWithOptions(
      {required JsAsyncContext that,
      required String code,
      required JsEvalOptions options}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
            that, serializer);
        sse_encode_String(code, serializer);
        sse_encode_box_autoadd_js_eval_options(options, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsAsyncContextEvalWithOptionsConstMeta,
      argValues: [that, code, options],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncContextEvalWithOptionsConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncContext_eval_with_options",
        argNames: ["that", "code", "options"],
      );

  @override
  Future<JsAsyncContext> crateApiJsJsAsyncContextFrom(
      {required JsAsyncRuntime rt}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
            rt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsJsAsyncContextFromConstMeta,
      argValues: [rt],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncContextFromConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncContext_from",
        argNames: ["rt"],
      );

  @override
  Future<bool> crateApiJsJsAsyncRuntimeExecutePendingJob(
      {required JsAsyncRuntime that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsJsAsyncRuntimeExecutePendingJobConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncRuntimeExecutePendingJobConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncRuntime_execute_pending_job",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiJsJsAsyncRuntimeIdle({required JsAsyncRuntime that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsAsyncRuntimeIdleConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncRuntimeIdleConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncRuntime_idle",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiJsJsAsyncRuntimeIsJobPending(
      {required JsAsyncRuntime that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsAsyncRuntimeIsJobPendingConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncRuntimeIsJobPendingConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncRuntime_is_job_pending",
        argNames: ["that"],
      );

  @override
  Future<MemoryUsage> crateApiJsJsAsyncRuntimeMemoryUsage(
      {required JsAsyncRuntime that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsAsyncRuntimeMemoryUsageConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncRuntimeMemoryUsageConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncRuntime_memory_usage",
        argNames: ["that"],
      );

  @override
  JsAsyncRuntime crateApiJsJsAsyncRuntimeNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsJsAsyncRuntimeNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncRuntimeNewConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncRuntime_new",
        argNames: [],
      );

  @override
  Future<void> crateApiJsJsAsyncRuntimeRunGc({required JsAsyncRuntime that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsAsyncRuntimeRunGcConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncRuntimeRunGcConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncRuntime_run_gc",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiJsJsAsyncRuntimeSetGcThreshold(
      {required JsAsyncRuntime that, required BigInt threshold}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
            that, serializer);
        sse_encode_usize(threshold, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsAsyncRuntimeSetGcThresholdConstMeta,
      argValues: [that, threshold],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncRuntimeSetGcThresholdConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncRuntime_set_gc_threshold",
        argNames: ["that", "threshold"],
      );

  @override
  Future<void> crateApiJsJsAsyncRuntimeSetInfo(
      {required JsAsyncRuntime that, required String info}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
            that, serializer);
        sse_encode_String(info, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsJsAsyncRuntimeSetInfoConstMeta,
      argValues: [that, info],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncRuntimeSetInfoConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncRuntime_set_info",
        argNames: ["that", "info"],
      );

  @override
  Future<void> crateApiJsJsAsyncRuntimeSetMaxStackSize(
      {required JsAsyncRuntime that, required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
            that, serializer);
        sse_encode_usize(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsAsyncRuntimeSetMaxStackSizeConstMeta,
      argValues: [that, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncRuntimeSetMaxStackSizeConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncRuntime_set_max_stack_size",
        argNames: ["that", "limit"],
      );

  @override
  Future<void> crateApiJsJsAsyncRuntimeSetMemoryLimit(
      {required JsAsyncRuntime that, required BigInt limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
            that, serializer);
        sse_encode_usize(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsAsyncRuntimeSetMemoryLimitConstMeta,
      argValues: [that, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncRuntimeSetMemoryLimitConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncRuntime_set_memory_limit",
        argNames: ["that", "limit"],
      );

  @override
  Future<void> crateApiJsJsAsyncRuntimeSetModules(
      {required JsAsyncRuntime that, required List<JsModule> modules}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
            that, serializer);
        sse_encode_list_js_module(modules, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsJsAsyncRuntimeSetModulesConstMeta,
      argValues: [that, modules],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsAsyncRuntimeSetModulesConstMeta =>
      const TaskConstMeta(
        debugName: "JsAsyncRuntime_set_modules",
        argNames: ["that", "modules"],
      );

  @override
  JsEvalResult crateApiJsJsContextEval(
      {required JsContext that, required String code}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext(
            that, serializer);
        sse_encode_String(code, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsContextEvalConstMeta,
      argValues: [that, code],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsContextEvalConstMeta => const TaskConstMeta(
        debugName: "JsContext_eval",
        argNames: ["that", "code"],
      );

  @override
  JsEvalResult crateApiJsJsContextEvalFile(
      {required JsContext that, required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext(
            that, serializer);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsContextEvalFileConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsContextEvalFileConstMeta =>
      const TaskConstMeta(
        debugName: "JsContext_eval_file",
        argNames: ["that", "path"],
      );

  @override
  JsEvalResult crateApiJsJsContextEvalFileWithOptions(
      {required JsContext that,
      required String path,
      required JsEvalOptions options}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext(
            that, serializer);
        sse_encode_String(path, serializer);
        sse_encode_box_autoadd_js_eval_options(options, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsContextEvalFileWithOptionsConstMeta,
      argValues: [that, path, options],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsContextEvalFileWithOptionsConstMeta =>
      const TaskConstMeta(
        debugName: "JsContext_eval_file_with_options",
        argNames: ["that", "path", "options"],
      );

  @override
  JsEvalResult crateApiJsJsContextEvalWithOptions(
      {required JsContext that,
      required String code,
      required JsEvalOptions options}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext(
            that, serializer);
        sse_encode_String(code, serializer);
        sse_encode_box_autoadd_js_eval_options(options, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_eval_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsContextEvalWithOptionsConstMeta,
      argValues: [that, code, options],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsContextEvalWithOptionsConstMeta =>
      const TaskConstMeta(
        debugName: "JsContext_eval_with_options",
        argNames: ["that", "code", "options"],
      );

  @override
  JsContext crateApiJsJsContextNew({required JsRuntime rt}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
            rt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsJsContextNewConstMeta,
      argValues: [rt],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsContextNewConstMeta => const TaskConstMeta(
        debugName: "JsContext_new",
        argNames: ["rt"],
      );

  @override
  bool crateApiJsJsRuntimeExecutePendingJob({required JsRuntime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsJsRuntimeExecutePendingJobConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsRuntimeExecutePendingJobConstMeta =>
      const TaskConstMeta(
        debugName: "JsRuntime_execute_pending_job",
        argNames: ["that"],
      );

  @override
  bool crateApiJsJsRuntimeIsJobPending({required JsRuntime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsRuntimeIsJobPendingConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsRuntimeIsJobPendingConstMeta =>
      const TaskConstMeta(
        debugName: "JsRuntime_is_job_pending",
        argNames: ["that"],
      );

  @override
  MemoryUsage crateApiJsJsRuntimeMemoryUsage({required JsRuntime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsRuntimeMemoryUsageConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsRuntimeMemoryUsageConstMeta =>
      const TaskConstMeta(
        debugName: "JsRuntime_memory_usage",
        argNames: ["that"],
      );

  @override
  JsRuntime crateApiJsJsRuntimeNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsJsRuntimeNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsRuntimeNewConstMeta => const TaskConstMeta(
        debugName: "JsRuntime_new",
        argNames: [],
      );

  @override
  void crateApiJsJsRuntimeRunGc({required JsRuntime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsRuntimeRunGcConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsRuntimeRunGcConstMeta => const TaskConstMeta(
        debugName: "JsRuntime_run_gc",
        argNames: ["that"],
      );

  @override
  void crateApiJsJsRuntimeSetDumpFlags(
      {required JsRuntime that, required BigInt flags}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
            that, serializer);
        sse_encode_u_64(flags, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsRuntimeSetDumpFlagsConstMeta,
      argValues: [that, flags],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsRuntimeSetDumpFlagsConstMeta =>
      const TaskConstMeta(
        debugName: "JsRuntime_set_dump_flags",
        argNames: ["that", "flags"],
      );

  @override
  void crateApiJsJsRuntimeSetGcThreshold(
      {required JsRuntime that, required BigInt threshold}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
            that, serializer);
        sse_encode_usize(threshold, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsRuntimeSetGcThresholdConstMeta,
      argValues: [that, threshold],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsRuntimeSetGcThresholdConstMeta =>
      const TaskConstMeta(
        debugName: "JsRuntime_set_gc_threshold",
        argNames: ["that", "threshold"],
      );

  @override
  void crateApiJsJsRuntimeSetInfo(
      {required JsRuntime that, required String info}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
            that, serializer);
        sse_encode_String(info, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsJsRuntimeSetInfoConstMeta,
      argValues: [that, info],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsRuntimeSetInfoConstMeta => const TaskConstMeta(
        debugName: "JsRuntime_set_info",
        argNames: ["that", "info"],
      );

  @override
  void crateApiJsJsRuntimeSetMaxStackSize(
      {required JsRuntime that, required BigInt limit}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
            that, serializer);
        sse_encode_usize(limit, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsRuntimeSetMaxStackSizeConstMeta,
      argValues: [that, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsRuntimeSetMaxStackSizeConstMeta =>
      const TaskConstMeta(
        debugName: "JsRuntime_set_max_stack_size",
        argNames: ["that", "limit"],
      );

  @override
  void crateApiJsJsRuntimeSetMemoryLimit(
      {required JsRuntime that, required BigInt limit}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
            that, serializer);
        sse_encode_usize(limit, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsRuntimeSetMemoryLimitConstMeta,
      argValues: [that, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsRuntimeSetMemoryLimitConstMeta =>
      const TaskConstMeta(
        debugName: "JsRuntime_set_memory_limit",
        argNames: ["that", "limit"],
      );

  @override
  Future<void> crateApiJsJsRuntimeSetModules(
      {required JsRuntime that, required List<JsModule> modules}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
            that, serializer);
        sse_encode_list_js_module(modules, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsJsRuntimeSetModulesConstMeta,
      argValues: [that, modules],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsRuntimeSetModulesConstMeta =>
      const TaskConstMeta(
        debugName: "JsRuntime_set_modules",
        argNames: ["that", "modules"],
      );

  @override
  Future<void> crateApiInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  JsEvalOptions crateApiJsJsEvalOptionsNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_eval_options,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsEvalOptionsNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsEvalOptionsNewConstMeta => const TaskConstMeta(
        debugName: "js_eval_options_new",
        argNames: [],
      );

  @override
  JsModule crateApiJsJsModuleFromCode(
      {required String module, required String code}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(module, serializer);
        sse_encode_String(code, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_module,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsModuleFromCodeConstMeta,
      argValues: [module, code],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsModuleFromCodeConstMeta => const TaskConstMeta(
        debugName: "js_module_from_code",
        argNames: ["module", "code"],
      );

  @override
  JsModule crateApiJsJsModuleFromPath(
      {required String module, required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(module, serializer);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_module,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiJsJsModuleFromPathConstMeta,
      argValues: [module, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsModuleFromPathConstMeta => const TaskConstMeta(
        debugName: "js_module_from_path",
        argNames: ["module", "path"],
      );

  @override
  JsModule crateApiJsJsModuleNew(
      {required String module, String? code, String? path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(module, serializer);
        sse_encode_opt_String(code, serializer);
        sse_encode_opt_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_js_module,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiJsJsModuleNewConstMeta,
      argValues: [module, code, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiJsJsModuleNewConstMeta => const TaskConstMeta(
        debugName: "js_module_new",
        argNames: ["module", "code", "path"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JsAsyncContext => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JsAsyncContext => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JsAsyncRuntime => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JsAsyncRuntime => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JsContext => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JsContext => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JsRuntime => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JsRuntime => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MemoryUsage => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MemoryUsage => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  JsAsyncContext
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsAsyncContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsAsyncRuntime
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsAsyncRuntimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsContext
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsRuntime
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsRuntimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MemoryUsage
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MemoryUsageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsAsyncContext
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsAsyncContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsAsyncRuntime
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsAsyncRuntimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsContext
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsRuntime
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsRuntimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsAsyncContext
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsAsyncContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsAsyncRuntime
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsAsyncRuntimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsContext
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JsRuntime
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JsRuntimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MemoryUsage
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MemoryUsageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  JsEvalOptions dco_decode_box_autoadd_js_eval_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_js_eval_options(raw);
  }

  @protected
  JsValue dco_decode_box_autoadd_js_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_js_value(raw);
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  JsEvalOptions dco_decode_js_eval_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return JsEvalOptions.raw(
      global: dco_decode_bool(arr[0]),
      strict: dco_decode_bool(arr[1]),
      backtraceBarrier: dco_decode_bool(arr[2]),
      promise: dco_decode_bool(arr[3]),
    );
  }

  @protected
  JsEvalResult dco_decode_js_eval_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return JsEvalResult_Ok(
          dco_decode_box_autoadd_js_value(raw[1]),
        );
      case 1:
        return JsEvalResult_Err(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  JsModule dco_decode_js_module(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return JsModule_Code(
          dco_decode_String(raw[1]),
          dco_decode_String(raw[2]),
        );
      case 1:
        return JsModule_Path(
          dco_decode_String(raw[1]),
          dco_decode_String(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  JsValue dco_decode_js_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return const JsValue_Null();
      case 1:
        return JsValue_Boolean(
          dco_decode_bool(raw[1]),
        );
      case 2:
        return JsValue_Integer(
          dco_decode_i_64(raw[1]),
        );
      case 3:
        return JsValue_Float(
          dco_decode_f_64(raw[1]),
        );
      case 4:
        return JsValue_Bigint(
          dco_decode_String(raw[1]),
        );
      case 5:
        return JsValue_String(
          dco_decode_String(raw[1]),
        );
      case 6:
        return JsValue_Array(
          dco_decode_list_js_value(raw[1]),
        );
      case 7:
        return JsValue_Object(
          dco_decode_list_key_value(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  KeyValue dco_decode_key_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return KeyValue(
      key: dco_decode_String(arr[0]),
      value: dco_decode_js_value(arr[1]),
    );
  }

  @protected
  List<JsModule> dco_decode_list_js_module(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_js_module).toList();
  }

  @protected
  List<JsValue> dco_decode_list_js_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_js_value).toList();
  }

  @protected
  List<KeyValue> dco_decode_list_key_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_key_value).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  List<JsValue>? dco_decode_opt_list_js_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_js_value(raw);
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  JsAsyncContext
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsAsyncContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsAsyncRuntime
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsAsyncRuntimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsContext
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsRuntime
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsRuntimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MemoryUsage
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MemoryUsageImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsAsyncContext
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsAsyncContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsAsyncRuntime
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsAsyncRuntimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsContext
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsRuntime
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsRuntimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsAsyncContext
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsAsyncContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsAsyncRuntime
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsAsyncRuntimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsContext
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JsRuntime
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JsRuntimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MemoryUsage
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MemoryUsageImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  JsEvalOptions sse_decode_box_autoadd_js_eval_options(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_js_eval_options(deserializer));
  }

  @protected
  JsValue sse_decode_box_autoadd_js_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_js_value(deserializer));
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  JsEvalOptions sse_decode_js_eval_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_global = sse_decode_bool(deserializer);
    var var_strict = sse_decode_bool(deserializer);
    var var_backtraceBarrier = sse_decode_bool(deserializer);
    var var_promise = sse_decode_bool(deserializer);
    return JsEvalOptions.raw(
        global: var_global,
        strict: var_strict,
        backtraceBarrier: var_backtraceBarrier,
        promise: var_promise);
  }

  @protected
  JsEvalResult sse_decode_js_eval_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_js_value(deserializer);
        return JsEvalResult_Ok(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return JsEvalResult_Err(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  JsModule sse_decode_js_module(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return JsModule_Code(var_field0, var_field1);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_String(deserializer);
        return JsModule_Path(var_field0, var_field1);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  JsValue sse_decode_js_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return const JsValue_Null();
      case 1:
        var var_field0 = sse_decode_bool(deserializer);
        return JsValue_Boolean(var_field0);
      case 2:
        var var_field0 = sse_decode_i_64(deserializer);
        return JsValue_Integer(var_field0);
      case 3:
        var var_field0 = sse_decode_f_64(deserializer);
        return JsValue_Float(var_field0);
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return JsValue_Bigint(var_field0);
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return JsValue_String(var_field0);
      case 6:
        var var_field0 = sse_decode_list_js_value(deserializer);
        return JsValue_Array(var_field0);
      case 7:
        var var_field0 = sse_decode_list_key_value(deserializer);
        return JsValue_Object(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  KeyValue sse_decode_key_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_js_value(deserializer);
    return KeyValue(key: var_key, value: var_value);
  }

  @protected
  List<JsModule> sse_decode_list_js_module(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <JsModule>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_js_module(deserializer));
    }
    return ans_;
  }

  @protected
  List<JsValue> sse_decode_list_js_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <JsValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_js_value(deserializer));
    }
    return ans_;
  }

  @protected
  List<KeyValue> sse_decode_list_key_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <KeyValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_key_value(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<JsValue>? sse_decode_opt_list_js_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_js_value(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
          JsAsyncContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsAsyncContextImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
          JsAsyncRuntime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsAsyncRuntimeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext(
          JsContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsContextImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
          JsRuntime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsRuntimeImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage(
          MemoryUsage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MemoryUsageImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
          JsAsyncContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsAsyncContextImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
          JsAsyncRuntime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsAsyncRuntimeImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext(
          JsContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsContextImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
          JsRuntime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsRuntimeImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncContext(
          JsAsyncContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsAsyncContextImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsAsyncRuntime(
          JsAsyncRuntime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsAsyncRuntimeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsContext(
          JsContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsContextImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJsRuntime(
          JsRuntime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JsRuntimeImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMemoryUsage(
          MemoryUsage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MemoryUsageImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_js_eval_options(
      JsEvalOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_js_eval_options(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_js_value(JsValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_js_value(self, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_js_eval_options(
      JsEvalOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.global, serializer);
    sse_encode_bool(self.strict, serializer);
    sse_encode_bool(self.backtraceBarrier, serializer);
    sse_encode_bool(self.promise, serializer);
  }

  @protected
  void sse_encode_js_eval_result(JsEvalResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case JsEvalResult_Ok(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_js_value(field0, serializer);
      case JsEvalResult_Err(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_js_module(JsModule self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case JsModule_Code(field0: final field0, field1: final field1):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_String(field1, serializer);
      case JsModule_Path(field0: final field0, field1: final field1):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_String(field1, serializer);
    }
  }

  @protected
  void sse_encode_js_value(JsValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case JsValue_Null():
        sse_encode_i_32(0, serializer);
      case JsValue_Boolean(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(field0, serializer);
      case JsValue_Integer(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_i_64(field0, serializer);
      case JsValue_Float(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_f_64(field0, serializer);
      case JsValue_Bigint(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
      case JsValue_String(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
      case JsValue_Array(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_list_js_value(field0, serializer);
      case JsValue_Object(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_list_key_value(field0, serializer);
    }
  }

  @protected
  void sse_encode_key_value(KeyValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.key, serializer);
    sse_encode_js_value(self.value, serializer);
  }

  @protected
  void sse_encode_list_js_module(
      List<JsModule> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_js_module(item, serializer);
    }
  }

  @protected
  void sse_encode_list_js_value(List<JsValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_js_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_key_value(
      List<KeyValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_key_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_js_value(
      List<JsValue>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_js_value(self, serializer);
    }
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class JsAsyncContextImpl extends RustOpaque implements JsAsyncContext {
  // Not to be used by end users
  JsAsyncContextImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JsAsyncContextImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibFjs.instance.api.rust_arc_increment_strong_count_JsAsyncContext,
    rustArcDecrementStrongCount:
        LibFjs.instance.api.rust_arc_decrement_strong_count_JsAsyncContext,
    rustArcDecrementStrongCountPtr:
        LibFjs.instance.api.rust_arc_decrement_strong_count_JsAsyncContextPtr,
  );

  Future<JsEvalResult> eval({required String code}) =>
      LibFjs.instance.api.crateApiJsJsAsyncContextEval(that: this, code: code);

  Future<JsEvalResult> evalFile({required String path}) => LibFjs.instance.api
      .crateApiJsJsAsyncContextEvalFile(that: this, path: path);

  Future<JsEvalResult> evalFileWithOptions(
          {required String path, required JsEvalOptions options}) =>
      LibFjs.instance.api.crateApiJsJsAsyncContextEvalFileWithOptions(
          that: this, path: path, options: options);

  Future<JsEvalResult> evalFunction(
          {required String module,
          required String method,
          List<JsValue>? params}) =>
      LibFjs.instance.api.crateApiJsJsAsyncContextEvalFunction(
          that: this, module: module, method: method, params: params);

  Future<JsEvalResult> evalWithOptions(
          {required String code, required JsEvalOptions options}) =>
      LibFjs.instance.api.crateApiJsJsAsyncContextEvalWithOptions(
          that: this, code: code, options: options);
}

@sealed
class JsAsyncRuntimeImpl extends RustOpaque implements JsAsyncRuntime {
  // Not to be used by end users
  JsAsyncRuntimeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JsAsyncRuntimeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibFjs.instance.api.rust_arc_increment_strong_count_JsAsyncRuntime,
    rustArcDecrementStrongCount:
        LibFjs.instance.api.rust_arc_decrement_strong_count_JsAsyncRuntime,
    rustArcDecrementStrongCountPtr:
        LibFjs.instance.api.rust_arc_decrement_strong_count_JsAsyncRuntimePtr,
  );

  Future<bool> executePendingJob() =>
      LibFjs.instance.api.crateApiJsJsAsyncRuntimeExecutePendingJob(
        that: this,
      );

  Future<void> idle() => LibFjs.instance.api.crateApiJsJsAsyncRuntimeIdle(
        that: this,
      );

  Future<bool> isJobPending() =>
      LibFjs.instance.api.crateApiJsJsAsyncRuntimeIsJobPending(
        that: this,
      );

  Future<MemoryUsage> memoryUsage() =>
      LibFjs.instance.api.crateApiJsJsAsyncRuntimeMemoryUsage(
        that: this,
      );

  Future<void> runGc() => LibFjs.instance.api.crateApiJsJsAsyncRuntimeRunGc(
        that: this,
      );

  Future<void> setGcThreshold({required BigInt threshold}) => LibFjs
      .instance.api
      .crateApiJsJsAsyncRuntimeSetGcThreshold(that: this, threshold: threshold);

  Future<void> setInfo({required String info}) => LibFjs.instance.api
      .crateApiJsJsAsyncRuntimeSetInfo(that: this, info: info);

  Future<void> setMaxStackSize({required BigInt limit}) => LibFjs.instance.api
      .crateApiJsJsAsyncRuntimeSetMaxStackSize(that: this, limit: limit);

  Future<void> setMemoryLimit({required BigInt limit}) => LibFjs.instance.api
      .crateApiJsJsAsyncRuntimeSetMemoryLimit(that: this, limit: limit);

  Future<void> setModules({required List<JsModule> modules}) =>
      LibFjs.instance.api
          .crateApiJsJsAsyncRuntimeSetModules(that: this, modules: modules);
}

@sealed
class JsContextImpl extends RustOpaque implements JsContext {
  // Not to be used by end users
  JsContextImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JsContextImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibFjs.instance.api.rust_arc_increment_strong_count_JsContext,
    rustArcDecrementStrongCount:
        LibFjs.instance.api.rust_arc_decrement_strong_count_JsContext,
    rustArcDecrementStrongCountPtr:
        LibFjs.instance.api.rust_arc_decrement_strong_count_JsContextPtr,
  );

  JsEvalResult eval({required String code}) =>
      LibFjs.instance.api.crateApiJsJsContextEval(that: this, code: code);

  JsEvalResult evalFile({required String path}) =>
      LibFjs.instance.api.crateApiJsJsContextEvalFile(that: this, path: path);

  JsEvalResult evalFileWithOptions(
          {required String path, required JsEvalOptions options}) =>
      LibFjs.instance.api.crateApiJsJsContextEvalFileWithOptions(
          that: this, path: path, options: options);

  JsEvalResult evalWithOptions(
          {required String code, required JsEvalOptions options}) =>
      LibFjs.instance.api.crateApiJsJsContextEvalWithOptions(
          that: this, code: code, options: options);
}

@sealed
class JsRuntimeImpl extends RustOpaque implements JsRuntime {
  // Not to be used by end users
  JsRuntimeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JsRuntimeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibFjs.instance.api.rust_arc_increment_strong_count_JsRuntime,
    rustArcDecrementStrongCount:
        LibFjs.instance.api.rust_arc_decrement_strong_count_JsRuntime,
    rustArcDecrementStrongCountPtr:
        LibFjs.instance.api.rust_arc_decrement_strong_count_JsRuntimePtr,
  );

  bool executePendingJob() =>
      LibFjs.instance.api.crateApiJsJsRuntimeExecutePendingJob(
        that: this,
      );

  bool isJobPending() => LibFjs.instance.api.crateApiJsJsRuntimeIsJobPending(
        that: this,
      );

  MemoryUsage memoryUsage() =>
      LibFjs.instance.api.crateApiJsJsRuntimeMemoryUsage(
        that: this,
      );

  void runGc() => LibFjs.instance.api.crateApiJsJsRuntimeRunGc(
        that: this,
      );

  void setDumpFlags({required BigInt flags}) => LibFjs.instance.api
      .crateApiJsJsRuntimeSetDumpFlags(that: this, flags: flags);

  void setGcThreshold({required BigInt threshold}) => LibFjs.instance.api
      .crateApiJsJsRuntimeSetGcThreshold(that: this, threshold: threshold);

  void setInfo({required String info}) =>
      LibFjs.instance.api.crateApiJsJsRuntimeSetInfo(that: this, info: info);

  void setMaxStackSize({required BigInt limit}) => LibFjs.instance.api
      .crateApiJsJsRuntimeSetMaxStackSize(that: this, limit: limit);

  void setMemoryLimit({required BigInt limit}) => LibFjs.instance.api
      .crateApiJsJsRuntimeSetMemoryLimit(that: this, limit: limit);

  Future<void> setModules({required List<JsModule> modules}) =>
      LibFjs.instance.api
          .crateApiJsJsRuntimeSetModules(that: this, modules: modules);
}

@sealed
class MemoryUsageImpl extends RustOpaque implements MemoryUsage {
  // Not to be used by end users
  MemoryUsageImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MemoryUsageImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibFjs.instance.api.rust_arc_increment_strong_count_MemoryUsage,
    rustArcDecrementStrongCount:
        LibFjs.instance.api.rust_arc_decrement_strong_count_MemoryUsage,
    rustArcDecrementStrongCountPtr:
        LibFjs.instance.api.rust_arc_decrement_strong_count_MemoryUsagePtr,
  );
}
